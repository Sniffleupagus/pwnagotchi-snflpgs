#
# expects to be called with
#
# item = { name: 'resulting_binary', url: 'https://github.com/foo/bar.git' }
#

- name: "Check for  {{item.name}} binary in {{staging}}/bin"
  stat: path="{{staging}}/bin/{{item.name}}"
  register: big_binary

- name: "Install from staged"
  when: big_binary.stat.exists
  copy:
    src: "{{staging}}/bin/{{item.name}}"
    dest: "/usr/local/bin/"
    mode: 0755

- name: "Ain't there, so build it"
  when: not big_binary.stat.exists
  block:
  - name: Check for existance of Golang in /usr/local/go
    stat: path=/usr/local/go
    register: big_golang

  - name: Download and install armv6l golang
    when: not big_golang.stat.exists
    unarchive:
      src: https://go.dev/dl/go1.21.3.linux-armv6l.tar.gz
      dest: /usr/local
      remote_src: yes
    register: big_golang
    tags: only32

  - name: Download and install arm64 golang
    when: not big_golang.stat.exists
    unarchive:
      src: https://go.dev/dl/go1.21.3.linux-arm64.tar.gz
      dest: /usr/local
      remote_src: yes
    register: big_golang
    tags: only64

  - name: 'Download target {{ item.name }} from github'
    git:
      repo: "{{ item.url }}"
      dest: '/usr/local/src/{{ item.name }}'
    register: big_download

  - name: "go mod tidy for {{item.name}}"
    shell: "go mod tidy"
    register: result
    args:
      executable: /bin/bash
      chdir: '/usr/local/src/{{ item.name }}'
    retries: 3
    delay: 10
    until: result is not failed
    ignore_errors: true
#    environment:
#      - GOPROXY: "http://127.0.0.1:8080"
#      - GOSUMDB: "off"
      
  - name: "build and install {{item.name}}"
    make:
      chdir: '/usr/local/src/{{ item.name }}'
      target: "{{target}}"
    loop_control:
      loop_var: target
    loop:
        - all
        - install
    register: result
    environment:
#      - GOPROXY: "http://127.0.0.1:8080"
#      - GOSUMDB: "off"

  - name: "make bin staging dir {{staging}}/bin"
    file:
      state: directory
      path: "{{staging}}/bin"

  - name: "copy built {{item.name}} binary to staging directory"
    copy:
      src: '/usr/local/bin/{{ item.name }}'
      dest: "{{staging}}/bin/"
          
  - name: remove build folder
    file:
      state: absent
      path: '/usr/local/src/{{ item.name }}'

