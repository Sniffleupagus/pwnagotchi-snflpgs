---
- hosts:
    - 127.0.0.1
  max_fail_percentage: 50
  
  gather_facts: true
  become: true
  vars:
    boards:
    staging: "/root/staging/{{ ansible_architecture }}"
    packer:
      build: "unspecified {{ansible_architecture}}"
    default_hostname: "raspberrypi"
    kernel:
      min: "6.1"
      full: "6.1.21"
      full_2w: "6.1.21-v7+"
      full_4b: "6.1.21-v7l+"
      full_opi: "6.1.31-sun50iw9"
      arch: "v6l"
    pwnagotchi:
      hostname: "{{ lookup('env', 'PWN_HOSTNAME') | default('pwnagotchi', true) }}"
      version: "{{ lookup('env', 'PWN_VERSION') | default('pwnagotchi-sniffleupagus', true) }}"
      build: "{{ lookup('env', 'PWN_BUILD') }}"      
      custom_plugin_dir: "/usr/local/share/pwnagotchi/custom-plugins"
      wheel: "pwnagotchi-{{ lookup('env', 'PWN_VERSION') | default('*', true) }}-py3-none-any.whl"
      display:
        type: "displayhatmini"
        enabled: "true"
    system:
      pip_extra_args: "--no-cache-dir"
      boot_options:
        - "#### pwnagotchi additions"
        - ""
        - "# dwc2 for RNDIS. comment out, and remove dwc2 and g_ether from cmdline.txt for X306 usb battery hat"
        - "dtoverlay=dwc2"
        - ""
        - "# enable i2c and spi for screens"
        - "dtoverlay=spi1-3cs"
        - "dtparam=i2c1=on"
        - "dtparam=i2c_arm=on"
        - "dtparam=spi=on"
        - ""
        - "gpu_mem=16"
        - ""
        - "#### audio out on pins 18 and 19"
        - "#dtoverlay=audremap,pins_18_19"
        - ""
        - "#### touchscreen on waveshare touch e-paper"
        - "#dtoverlay=goodix,interrupt=27,reset=22"
        - ""
        - "#### for PWM backlighting on pimoroni displayhatmini"
        - "dtoverlay=pwm-2chan,pin=12,func=4,pin2=13,func2=4"
      modules:
        - "i2c-dev"
    services:
      enable:
        - bettercap.service
        - dphys-swapfile.service
        - fstrim.timer
        - pwnagotchi.service
        - pwngrid-peer.service
      disable:
        - apt-daily-upgrade.service
        - apt-daily-upgrade.timer
        - apt-daily.service
        - apt-daily.timer
        - bluetooth.service
        - ifup@wlan0.service
        - triggerhappy.service
        - wpa_supplicant.service
    packages:
      bettercap:
        url: "https://github.com/jayofelony/bettercap.git"
        ui: "https://github.com/bettercap/ui/releases/download/v1.3.0/ui.zip"
      pwngrid:
        url: "https://github.com/jayofelony/pwngrid.git"

      apt:
        downgrade:
        hold:
          - firmware-atheros
          - firmware-brcm80211
          - firmware-libertas
          - firmware-misc-nonfree
          - firmware-realtek
        remove:
          - nfs-common
          - raspberrypi-net-mods
          - triggerhappy
          - wpasupplicant
        install:
          - aircrack-ng
          - autoconf
          - bc
          - bison
          - bluez
          - build-essential
          - curl
          - dkms
          - dphys-swapfile
          - espeak-ng
          - evtest
          - fbi
          - flex
          - fonts-dejavu
          - fonts-dejavu-core
          - fonts-dejavu-extra
          - fonts-freefont-ttf
          - g++
          - gawk
          - gcc-arm-none-eabi
          - git
          - libatlas-base-dev
          - libblas-dev
          - libbz2-dev
          - libc-ares-dev
          - libc6-dev
          - libcpuinfo-dev
          - libdbus-1-dev
          - libdbus-glib-1-dev
          - libeigen3-dev
          - libelf-dev
          - libffi-dev
          - libfl-dev
          - libfuse-dev
          - libgdbm-dev
          - libgl1-mesa-glx
          - libgmp3-dev
          - libgstreamer1.0-0
          - libhdf5-dev
          - liblapack-dev
          - libncursesw5-dev
          - libnetfilter-queue-dev
          - libopenblas-dev
          - libopenjp2-7
          - libopenmpi-dev
          - libopenmpi3
          - libpcap-dev
          - libprotobuf-dev
          - libsleef-dev
          - libsqlite3-dev
          - libssl-dev
          - libtool
          - libts-bin
          - libusb-1.0-0-dev
          - lsof
          - make
          #- python3-charset-normalizer
          - python3-flask
          - python3-flask-cors
          - python3-flaskext.wtf
          - python3-fsspec
          - python3-full
          - python3-matplotlib
          - python3-networkx
          - python3-oauthlib
          - python3-pandas
          - python3-pil
          - python3-pip
          - python3-prctl
          - python3-protobuf
          - python3-pycryptodome
          - python3-requests
          - python3-scapy
          - python3-smbus
          - python3-sympy
          - python3-tweepy
          - python3-venv
          - qpdf
          - rsync
          - screen
          - tcpdump
          - texinfo
          - time
          - tk-dev
          - unzip
          - vim
          - wget
          - wl
          - xxd
          - zlib1g-dev
    # move packages from above into extras when some builds need to override
    extras:
      apt:
        install:
          - libavcodec58
          - libavformat58
          - libswscale5
          - libtiff5
          - libraspberrypi-bin
          - libraspberrypi-dev
          - libraspberrypi-doc
          - libraspberrypi0

  environment:
    #ARCHFLAGS: -arch armv6l
    #QEMU_CPU: arm1176
    #QEMU_UNAME: "{{ kernel.full }}"

  tasks:
  - name: ntfy starting notice
    uri:
      url: "https://ntfy.sh/pwny_builder"
      method: POST
      body: "{{pwnagotchi.build}} ansible starting tasks"

  - name: "Include vars for {{pwnagotchi.build}}"
    ansible.builtin.include_vars: "vars/{{pwnagotchi.build}}_vars.yml"
      
  # - name: Fix DTB file for GPIO displays
  #   tags:
  #     - no_orangepi
  #     - no_raspi
  #   block:
  #     - name: Back up Original DTB file
  #       copy:
  #         src: /boot/dtb/allwinner/sun50i-h618-bananapi-m4zero.dtb
  #         dest: /boot/dtb/allwinner/sun50i-h618-bananapi-m4zero.dtb.ORIG
          
  #     - name: Back up Original DTB file
  #       copy:
  #         src: data/boot/dtb/allwinner/sun50i-h618-bananapi-m4zero-pwnagotchi.dtb
  #         dest: /boot/dtb/allwinner/sun50i-h618-bananapi-m4zero.dtb
          
#  - name: Print all available facts
#    ansible.builtin.debug:
#      var: ansible_facts

  - name: Create pi user, default password pwny1234
    copy:
      dest: /boot/userconf
      content: |
        pi:$6$3jNr0GA9KIyt4hmM$efeVIopdMQ8DGgEPCWWlbx3mJJNAYci1lEXGdlky0xPyjqwKNbwTL5SrCcpb4144C4IvzWjn7Iv.QjqmU7iyT/
    tags:
      - base

  - name: "Create pwnagotchi user, defauilt password pwny1234"
    user:
      name: pwnagotchi
      shell: /bin/bash
      groups: "daemon,adm,sudo"
      password: $1$eAz2hrdt$KBs24qNRPHaKYeSomEZJn1
      home: /home/pwnagotchi
      create_home: true
      skeleton: /etc/skel
      comment: "{{pwnagotchi.build}} pwnagotchi"
    register: pwnagotchi_user
    ignore_errors: true

  - name: check uname -m just to be sure
    shell: "uname -m && uname -a && ls -l /lib/modules && sudo uname -a"
    args:
      executable: /bin/bash
      chdir: /usr/local/src
    tags:
      - base

  # collect hostname in custom facts
  - name: change hostname
    lineinfile:
      dest: /etc/hostname
      regexp: "^{{default_hostname}}"
      line: "{{pwnagotchi.hostname}}"
      state: present
    when: lookup('file', '/etc/hostname') == default_hostname
    register: hostname
    tags:
      - base

  - name: add hostname to /etc/hosts
    lineinfile:
      dest: /etc/hosts
      regexp: '^127\.0\.1\.1[ \t]+(raspberrypi|bananapim2zero|orangepizero2w)'
      line: "127.0.1.1\t{{pwnagotchi.hostname}}"
      state: present
    when: hostname.changed
    tags:
      - base

  - name: disable sap plugin for bluetooth.service
    lineinfile:
      dest: /lib/systemd/system/bluetooth.service
      regexp: '^ExecStart=/usr/(lib|libexec)/bluetooth/bluetoothd$'
      line: 'ExecStart=/usr/\1/bluetooth/bluetoothd --noplugin=sap'
      state: present
      backrefs: yes
    tags:
      - base
      - no_orangepi
    ignore_errors: true

  - name: configure dphys-swapfile
    lineinfile:
      path: /etc/dphys-swapfile
      regexp: "^CONF_SWAPSIZE=.*$"
      line: "CONF_SWAPSIZE=2048"
    tags:
      - base
      - no_raspi
      - no_orangepi
      - no_bananapi

  # just did this in packer, no need to repeat it
  - name: update apt package cache
    apt:
      update_cache: yes

  #######
  # Pip3
  #######
  
  - name: "Set up a venv for pwnagotchi"
    shell: "python3 -m venv {{pwnagotchi_user.home}}/.venv"

  - name: "Configure venv to use system python libs"
    lineinfile:
      path: "{{pwnagotchi_user.home}}/.venv/pyvenv.cfg"
      state: present
      regexp: '^include-system-site-packages.*='
      line: 'include-system-site-packages = true'

  - name: update pip3, setuptools, wheel
    shell: "python3 -m pip install --upgrade pip setuptools wheel {{system.pip_extra_args}}"
    args:
      executable: /bin/bash
      chdir: /usr/local/src
    environment:
      PATH: "{{pwnagotchi_user.home}}/.venv/bin:{{ lookup('env', 'PATH') }}"

  - name: "Install apt packages for all systems"
    apt:
      name: "{{ packages.apt.install }}"
      state: present
      
  - name: "Install extra apt packages for {{pwnagotchi.build}}"
    when: extras.apt.install is defined
    apt:
      name: "{{ extras.apt.install }}"
      state: present
      
  # or build torch and torchvision
  # maybe someday
  - name: "Install support package: {{package.name}}"
    when: torch is defined
    include_tasks: build_torch_wheel.yml
    tags:
      - only32
      - no_raspi
    loop_control:
      loop_var: package
      label: "{{package.name}}"
    loop:
      - name: pytorch
        url: "{{ torch.repo }}"
        version: "release/2.1"
        wheel: "torch-2.1.0-cp39-cp39-linux_{{ansible_architecture}}.whl"
      - name: vision
        url: "{{ torchvision.repo }}"
        version: "release/0.16"
        wheel: "torchvision-0.16.0-cp39-cp39-linux_{{ansible_architecture}}.whl"

  ###########################################
  #
  # libpcap - build from source because apt version 1.10 does not work with pwngrid
  #
  ###########################################

  # check for presence, then it can re-run in later parts if needed
  # use the "make" built in
  - name: check for /usr/local/lib/libpcap.so.1
    stat: path=/usr/local/lib/libpcap.so.1
    register: libpcap_so

  - name: Build and install libpcap v1.11+
    when: not libpcap_so.stat.exists
    block:
      - name: clone libpcap from github
        git:
          repo: 'https://github.com/the-tcpdump-group/libpcap.git'
          dest: /usr/local/src/libpcap
          #version: libpcap-1.9

      - name: "Configure libpcap"
        shell: "./autogen.sh && ./configure"
        args:
          executable: /bin/bash
          chdir: /usr/local/src/libpcap
          creates: "/usr/local/src/libpcap/Makefile"

      - name: "'make' for libpcap"
        make:
          chdir: /usr/local/src/libpcap

      - name: "'make install' for libpcap"
        community.general.make:
          chdir: /usr/local/src/libpcap
          target: install

      - name: remove libpcap build folder
        file:
          state: absent
          path: /usr/local/src/libpcap

      # symlink  to alternate naming (older version?) that bettercap and pwngrid compile against
      - name: "Make symlink to libpcap.so.0.8"
        file:
          src: "/usr/local/lib/libpcap.so.1"
          dest: "/usr/local/lib/libpcap.so.0.8"
          state: link
    rescue:
      - name: Print libpcap errors
        ansible.builtin.debug:
          var: stdout_lines
        ignore_errors: true

  # - name: "NTFY libpcap is ready"
  #   ntfy:
  #     msg:"done with libpcap"
  #     topic: "pwny_builder"
  #     attrs:
  #       tags: [ rotating_light, heavy_check_mark ]
  #       priority: 5
  #       actions:
  #         - action: view
  #           label: "3D-Printer"
  #           url: "https://orbison.lan/"
            
  #############
  # PWNAGOTCHI
  #############
  - name: ntfy pwnagotchi notice
    uri:
      url: "https://ntfy.sh/pwny_builder"
      method: POST
      body: "{{pwnagotchi.build}} starting pwnagotchi wheel"

  - name: clone pwnagotchi repository
    git:
      repo: https://github.com/Sniffleupagus/pwnagotchi-snflpgs.git
      dest: /usr/local/src/pwnagotchi
    register: pwnagotchigit
    tags: pwnagotchi

  - name: "Remove torch, torchvision and stable_baselines3 as requirements"
    tags:
      - pwnagotchi
      - only32
      - no_raspi
    ansible.builtin.replace:
      path: "/usr/local/src/pwnagotchi/requirements.txt"
      regexp: "^({{item}})"
      replace: '# \1'
    loop:
      - 'torchvision'
      - 'torch'
      - 'stable_baselines'
      - 'rpi_hardware_pwm'

  - name: "Install extra pip packages for {{pwnagotchi.build}}"
    when: extras.pip is defined
    pip:
      name: "{{extras.pip}}"
      extra_args: "{{system.pip_extra_args}}"
      virtualenv: "{{pwnagotchi_user.home}}/.venv"
    ignore_errors: true
    environment:
      CFLAGS: "-fcommon"

  # is this even necessary? Can't we just link from /home/pi/pwnagotchi to /usr/local/{bin,lib,etc}
  # then just git update in the home dir and encourage hacking?
  # make owned by pi.pi, and custom plugins.
  - name: "Build pwnagotchi wheel"
    environment:
      PATH: "{{pwnagotchi_user.home}}/.venv/bin:{{ lookup('env', 'PATH') }}"
    command: "python3 setup.py sdist bdist_wheel"
    args:
      chdir: /usr/local/src/pwnagotchi
    when: (pwnagotchigit.changed) or (pip_packages['pwnagotchi'] is undefined) or (pip_packages['pwnagotchi'] != pwnagotchi_version)
    tags: pwnagotchi

  - name: "Find built pwnagotchi wheel"
    ansible.builtin.find:
      paths: "/usr/local/src/pwnagotchi/dist"
      pattern: 'pwnagotchi-*.whl'
      recurse: no
    register: pwnagotchi_wheel
    tags: pwnagotchi
      
  - name: "Verify wheel staging directory"
    file:
      path: "{{staging}}/wheels"
      state: "directory"
      mode: 0755

  # precompiled wheels for armv6l Raspberry Pi Zero W
  - name: "Download prebuilt 32-bit torch wheels for armv6l"
    when: torch is defined
    ansible.builtin.get_url:
      url: "{{ item }}"
      dest: "{{staging}}/wheels"
    loop:
      - "{{ torch.url }}"
      - "{{ torchvision.url }}"
    register: torchwheels
    tags:
      - only32
      - no_bananapi

  - name: "Install pwnagotchi"
    tags: no_base
    when:
      - (pwnagotchigit.changed) or (pip_packages['pwnagotchi'] is undefined) or (pip_packages['pwnagotchi'] != pwnagotchi_version)
    environment:
      QEMU_UNAME: "{{ kernel.full }}"
    block:
      - name: "install pwnagotchi wheel with staged torch wheels {{staging}} {{ansible_architecture}}"
        when:
          - torch is defined
          - torchvision is defined
        pip:
          name:
            - "{{pwnagotchi_wheel.files[0].path}}"
            - "{{ torch.url }}"
            - "{{ torchvision.url }}"
          extra_args: "{{system.pip_extra_args}}"
          chdir: "/usr/local/src/pwnagotchi/dist/"
          virtualenv: "{{pwnagotchi_user.home}}/.venv"
        register: result
        retries: 5
        delay: 20
        until: result is not failed

      - name: "install pwnagotchi wheel {{staging}}<--{{pwnagotchi_wheel.files[0].path}}"
        when:
          - torch is undefined
        pip:
          name: "{{pwnagotchi_wheel.files[0].path}}"
          extra_args: "{{system.pip_extra_args|default('')}}"
          chdir: "/usr/local/src/pwnagotchi/dist/"
          virtualenv: "{{pwnagotchi_user.home}}/.venv"
        register: result
        #retries: 3
        #delay: 10
        #until: result is not failed

  - name: ntfy pwny wheel notice
    uri:
      url: "https://ntfy.sh/pwny_builder"
      method: POST
      body: "{{pwnagotchi.build}} pwnagotchi wheel installed"

  # - name: "NTFY pwnywheel is ready"
  #   ntfy:
  #     msg:"done with pwny wheel"
  #     topic: "pwny_builder"
  #     attrs:
  #       tags: [ heavy_check_mark ]

  # This should be a OPi specific handler, included with an OPi role
  - name: "Link OPi.GPIO to RPi.GPIO, to truly seamlessly replace."
    file:
      src: "/usr/local/lib/python3.9/dist-packages/OPi"
      dest: "/usr/local/lib/python3.9/dist-packages/RPi"
      state: link
    tags:
      - orangepi
      - no_raspi
      - no_bananapim2zero
    ignore_errors: true

  - name: make wheel staging dir
    file:
      state: directory
      path: "{{ staging }}/wheels"

  - name: copy pwnagotchi wheel to staging dir
    ansible.builtin.copy:
      src: "{{ lookup('fileglob', '{{pwnagotchi_wheel.files[0].path}}') }}"
      dest: "{{ staging }}/wheels"
    tags: pwnagotchi

  - name: remove pwnagotchi build folder
    file:
      state: absent
      path: /usr/local/src/pwnagotchi
    tags: pwnagotchi

  #########################################################
  # Install nexmon to get monitor mode on built-in Pi WiFi
  #########################################################

  - name: build and install nexmon
    include_tasks: nexmon.yml
    loop: "{{ boards }}"
    loop_control:
      loop_var: board
      label: "{{board.name}}"
    tags:
      - no_bananapim4zero
      - no_orangepi

  # To shrink the final image, remove the nexmon directory (takes 2.5G of space) post build and installation
  - name: Delete nexmon content & directory
    file:
      state: absent
      path: /usr/local/src/nexmon/

  ##########################################
  #
  # pwngrid, bettercap
  #
  ##########################################

  - name: check for /usr/local/bin/bettercap
    stat: path=/usr/local/bin/bettercap
    register: bettercap

  - block:
    - name: "install bettercap if missing"
      when: not bettercap.stat.exists
      include_tasks: build_install_gopkg.yml
      vars:
        item:
          name: bettercap
          url: '{{ packages.bettercap.url }}'
    environment:
      GOPATH: "{{ lookup('env', 'HOME') }}/go"
      PATH: "/usr/local/go/bin:{{ lookup('env', 'PATH') }}"
      #GOPROXY: "http://127.0.0.1:8080"
      GOSUMDB: "off"

  - name: ntfy bettercap notice
    uri:
      url: "https://ntfy.sh/pwny_builder"
      method: POST
      body: "{{pwnagotchi.build}} bettercap done"

  - name: check for /usr/local/bin/pwngrid
    stat: path=/usr/local/bin/pwngrid
    register: pwngrid

  - block:
      - name: install pwngrid if missing
        when: not pwngrid.stat.exists
        include_tasks: build_install_gopkg.yml
        vars:
          item:
            name: pwngrid
            url: '{{ packages.pwngrid.url }}'
    environment:
      GOPATH: "{{ lookup('env', 'HOME') }}/go"
      PATH: "/usr/local/go/bin:{{ lookup('env', 'PATH') }}"
      #GOPROXY: "http://127.0.0.1:8080,direct"
      GOSUMDB: "off"

  - name: ntfy pwngrid notice
    uri:
      url: "https://ntfy.sh/pwny_builder"
      method: POST
      body: "{{pwnagotchi.build}} pwngrid done"

  # - name: "NTYF Go pkgs are done"
  #   ntfy:
  #     msg:"done with go pkgs"
  #     topic: "pwny_builder"
  #     attrs:
  #       tags: [ heavy_check_mark ]

  - name: clone bettercap caplets
    git:
      repo: http://github.com/jayofelony/caplets.git
      dest: /tmp/caplets
    register: capletsgit

  - name: install bettercap caplets
    make:
      chdir: /tmp/caplets
      target: install
    when: capletsgit.changed

  - name: download and install bettercap ui
    unarchive:
      src: "{{ packages.bettercap.ui }}"
      dest: /usr/local/share/bettercap/
      remote_src: yes
      mode: 0755

  # to always have the bettercap webui available (because why not?)
  - name: copy pwnagotchi-manual over pwnagotchi-auto caplet
    ansible.builtin.copy:
      src: /usr/local/share/bettercap/caplets/pwnagotchi-manual.cap
      dest: /usr/local/share/bettercap/caplets/pwnagotchi-auto.cap
      force: true
    ignore_errors: true

  - name: add HDMI powersave to rc.local
    blockinfile:
      path: /etc/rc.local
      insertbefore: "exit 0"
      block: |
        if ! /opt/vc/bin/tvservice -s | egrep 'HDMI|DVI'; then
          /opt/vc/bin/tvservice -o
        fi
    tags:
      - no_orangepi
      - no_bananapi

  - name: create /etc/pwnagotchi folder
    file:
      path: /etc/pwnagotchi
      state: directory
    tags: pwnagotchi

  - name: create /boot/pwnagotchi folder
    file:
      path: /boot/pwnagotchi
      state: directory
    tags: pwnagotchi

  - name: check if user configuration exists
    stat:
      path: /etc/pwnagotchi/config.toml
    register: user_config
    tags: pwnagotchi

  - name: create /boot/pwnagotchi/config.toml
    tags: pwnagotchi
    copy:
      dest: /boot/pwnagotchi/config.toml
      content: |
        # Add your configuration overrides on this file any configuration changes done to default.toml will be lost!
        # Example:
        #
        # use these to log into the web UI
        ui.web.username = "changeme"
        ui.web.password = "changeme"
        ui.display.enabled = {{pwnagotchi.display.enabled}}
        ui.display.type = "{{ pwnagotchi.display.type }}"
        main.custom_plugins = "{{ pwnagotchi.custom_plugin_dir }}"
        main.plugins.led.enabled = false
        main.plugins.auto-update.enabled = false
        main.plugins.morse_code.enabled = true
        personality.deauth = false
        personality.throttle_a = 0.3
        personality.throttle_d = 0.9
        ui.backgroundcolor="#ffffff"
        ui.foregroundcolor="#000000"
        ui.colormode="1"
        main.whitelist = [
          "EXAMPLE_NETWORK",
          "ANOTHER_EXAMPLE_NETWORK",
          "fo:od:ba:be:fo:od",
          "fo:od:ba",
        ]
        main.plugins.rss_voice.enabled = true
        main.plugins.rss_voice.path = "/root/voice_rss"
        main.plugins.rss_voice.feed.wait.url = "https://www.reddit.com/r/pwnagotchi/comments.rss"
        main.plugins.rss_voice.feed.bored.url = "https://www.reddit.com/r/pwnagotchi.rss"
        main.plugins.rss_voice.feed.sad.url = "https://www.reddit.com/r/showerthoughts.rss"
    when: not user_config.stat.exists

  - name: set up pi user crontab to kick wifi.recon on bettercap
    tags: pwnagotchi
    copy:
      dest: /tmp/pi_crontab
      content: |
        # Edit this file to introduce tasks to be run by cron.
        #
        # Each task to run has to be defined through a single line
        # indicating with different fields when the task will be run
        # and what command to run for the task
        #
        # To define the time you can provide concrete values for
        # minute (m), hour (h), day of month (dom), month (mon),
        # and day of week (dow) or use '*' in these fields (for 'any').
        #
        # Notice that tasks will be started based on the cron's system
        # daemon's notion of time and timezones.
        #
        # Output of the crontab jobs (including errors) is sent through
        # email to the user the crontab file belongs to (unless redirected).
        #
        # For example, you can run a backup of all your user accounts
        # at 5 a.m every week with:
        # 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/
        #
        # For more information see the manual pages of crontab(5) and cron(8)
        #
        # m h  dom mon dow   command
        PATH={{pwnagotchi_user.home}}/.venv/bin:$PATH
        */5 *  *   *   *     {{pwnagotchi_user.home}}/.local/bin/bcinfo.py -qw >/dev/null 2>&1

  - name: install pi crontab
    command: "crontab -u {{pwnagotchi_user.name}} /tmp/pi_crontab"
    args:
      chdir: /tmp
    register: pi_crontab
    ignore_errors: true
    tags:
      - pwnagotchi

  - name: delete /tmp/pi_crontab
    tags: pwnagotchi
    file:
      state: absent
      path: /tmp/pi_crontab

  - name: End of build setup block - ignoring errors to see what works and what does not work
    ignore_errors: true
    block:
      - name: Delete motd 10-uname
        file:
          state: absent
          path: /etc/update-motd.d/10-uname
        tags:
          - base
          - no_bananapi

      - name: enable ssh on boot
        file:
          path: /boot/ssh
          state: touch
        tags:
          - base
          - no_bananapi
        

      - name: disable wlan0 in dhcpcd.conf
        lineinfile:
          dest: /etc/dhcpcd.conf
          insertafter: EOF
          line: "denyinterfaces wlan0"
        tags:
          - base
          - no_orangepi
          - no_bananapi

      - name: adjust /boot/config.txt
        lineinfile:
          dest: /boot/config.txt
          insertafter: EOF
          line: '{{ item }}'
        with_items: "{{system.boot_options}}"
        tags:
          - pwnagotchi
          - no_orangepi
          - no_bananapi

      - name: adjust /etc/modules
        lineinfile:
          dest: /etc/modules
          insertafter: EOF
          line: '{{ item }}'
        with_items: "{{system.modules}}"
        tags:
          - pwnagotchi

      - name: change root partition
        replace:
          dest: /boot/cmdline.txt
          backup: no
          regexp: "root=PARTUUID=[a-zA-Z0-9\\-]+"
          replace: "root=/dev/mmcblk0p2"
        tags:
          - base
          - no_orangepi
          - no_bananapi

      - name: configure /boot/cmdline.txt
        lineinfile:
          path: /boot/cmdline.txt
          backrefs: True
          state: present
          backup: no
          regexp: '(.*)$'
          line: '\1 modules-load=dwc2,g_ether'
        tags:
          - pwnagotchi
          - no_orangepi
          - no_bananapi

      - name: configure bananapim4zero /boot/bananapiEnv.txt
        lineinfile:
          path: /boot/bananapiEnv.txt
          state: present
          regexp: '^overlays='
          line: 'overlays=ph-i2c1 pg-i2c4 pg-uart1 spi0-spidev spi1-cs1-spidev'
        tags:
          - no_raspi
          - no_orangepi
          - no_bananapim2zero

      - name: configure g_ether options for repeatable RNDIS device
        copy:
          dest: /etc/modprobe.d/g_ether.conf
          content: "options g_ether host_addr=f0:0d:ba:be:f0:0d dev_addr=58:70:77:6e:79:58"

      - name: clone Sniffleupagus pwny utils
        git:
          repo: https://github.com/Sniffleupagus/pwnagotchi-utils.git
          dest: "{{pwnagotchi_user.home}}/git/pwnagotchi-utils"
        register: sniffleupagus_utils_fetched
        tags: pwnagotchi

      - name: grab list of utils
        ansible.builtin.find:
          paths: "{{pwnagotchi_user.home}}/git/pwnagotchi-utils"
          patterns: '*.py'
          recurse: no
        register: sniffleupagus_utils
        tags: pwnagotchi

      - name: Create home bin directory
        file:
          path: "{{pwnagotchi_user.home}}/.local/bin"
          mode: '755'
          owner: '{{pwnagotchi_user.name}}'
          group: '{{pwnagotchi_user.group}}'
          state: directory
        tags: pwnagotchi

      - name: "Copy to {{pwnagotchi_user.home}}/.local/bin"
        ansible.builtin.copy:
          src: "{{ item.path }}"
          dest: "{{pwnagotchi_user.home}}/.local/bin/"
          follow: yes
          mode: '755'
          owner: '{{pwnagotchi_user.name}}'
        with_items: '{{ sniffleupagus_utils.files }}'
        tags: pwnagotchi

      ####################
      # Custom plugins
      ####################
      - name: Create custom plugin directory
        file:
          path: '{{ pwnagotchi.custom_plugin_dir }}'
          state: directory
        tags:
          - pwnagotchi

      # evil socket plugins
      - name: clone pwnagotchi community plugin repository
        git:
          repo: https://github.com/evilsocket/pwnagotchi-plugins-contrib.git
          dest: /usr/local/src/pwnagotchi-plugins-contrib
        register: evilsocket_plugins_fetched
        tags: pwnagotchi

      - name: grab list of plugins
        ansible.builtin.find:
          paths: /usr/local/src/pwnagotchi-plugins-contrib
          patterns: '*.py'
          recurse: no
        register: evilsocket_plugins
        tags: pwnagotchi

      - name: copy to custom plugins
        ansible.builtin.copy:
          src: '{{ item.path }}'
          dest: '{{ pwnagotchi.custom_plugin_dir }}'
          follow: yes
        with_items: '{{ evilsocket_plugins.files }}'
        ignore_errors: true
        tags: pwnagotchi

      # MORE plugins
      - name: clone Sniffleupagus plugins
        git:
          repo: https://github.com/Sniffleupagus/pwnagotchi_plugins.git
          dest: "{{pwnagotchi_user.home}}/git/pwnagotchi_plugins"
        register: sniffleupagus_plugins_fetched
        tags: pwnagotchi

      - name: grab list of plugins
        ansible.builtin.find:
          paths: "{{pwnagotchi_user.home}}/git/pwnagotchi_plugins"
          patterns: '*.py'
          recurse: no
        register: sniffleupagus_plugins
        tags: pwnagotchi

      - name: copy to custom plugins
        ansible.builtin.copy:
          src: '{{ item.path }}'
          dest: '{{ pwnagotchi.custom_plugin_dir }}'
          follow: yes
        with_items: '{{ sniffleupagus_plugins.files }}'
        tags: pwnagotchi

      - name: "Add {{alias}} alias to {{pwnagotchi_user.home}}/.bashrc"
        lineinfile:
          dest: "{{pwnagotchi_user.home}}/.bashrc"
          line: "\nalias {{alias.name}}={{alias.command}}"
          insertafter: EOF
        tags: pwnagotchi
        loop_control:
          loop_var: alias
          label: "{{alias.name}}"
        loop:
          - name: pwnlog
            command: "'tail -f -n300 /var/log/pwn*.log | sed --unbuffered \"s/,[[:digit:]]\\{3\\}\\]//g\" | cut -d \" \" -f 2-'"
          - name: pwnver
            command: "'python3 -c \"import pwnagotchi as p; print(p.__version__)\"'"
          - name: pwnkill
            command: "'sudo killall -USR1 pwnagotchi'"

      - name: add firmware packages to hold
        dpkg_selections:
          name: "{{ item }}"
          selection: hold
        with_items: "{{ packages.apt.hold }}"

      - name: disable unnecessary services
        systemd:
          name: "{{ item }}"
          state: stopped
          enabled: no
        with_items: "{{ services.disable }}"
        ignore_errors: true

      - name: enable services
        systemd:
          name: "{{ item }}"
          enabled: true
          state: stopped
        with_items: "{{ services.enable }}"
        tags: pwnagotchi

      - name: ntfy removing files
        uri:
          url: "https://ntfy.sh/pwny_builder"
          method: POST
          body: "{{pwnagotchi.build}} removing unnecessary build files"

      - name: remove golang build libraries
        file:
          state: absent
          path: /root/go

      - name: remove pre-collected packages zip
        file:
          path: /root/go_pkgs.tgz
          state: absent

      - name: remove golang
        file:
          state: absent
          path: /usr/local/go

      - name: Change permissions on /root to readable, becauase that's where all pwnagotchi files go
        file:
          path: /root
          mode: '755'

      - name: "Fix permissions on {{pwnagotchi_user.home}} to {{pwnagotchi_user.name}}:{{pwnagotchi_user.group}}"
        file:
          path: "{{pwnagotchi_user.home}}"
          owner: "{{pwnagotchi_user.name}}"
          group: "{{pwnagotchi_user.group}}"
          mode: "u=rwX,go=rX"
          recurse: true

      - name: remove unnecessary apt packages
        apt:
          name: "{{ packages.apt.remove }}"
          state: absent
          purge: yes

      - name: remove dependencies that are no longer required
        apt:
          autoremove: yes

      - name: clean apt cache
        apt:
          autoclean: true

      - name: remove apt package cache
        shell: "apt clean"
        args:
          executable: /bin/bash
          chdir: /usr/local/src

      - name: remove /root/.cache (pip cache)
        file:
          state: absent
          path: /root/.cache

      - name: remove ssh keys
        tags:
          - no_bananapi
        file:
          state: absent
          path: "{{ item }}"
        with_fileglob:
          - "/etc/ssh/ssh_host*_key*"

      - name: regenerate ssh keys
        tags:
          - no_bananapi
          - only64
        shell: "dpkg-reconfigure openssh-server"
        args:
          executable: /bin/bash

  handlers:
    - name: reload systemd services
      systemd:
        daemon_reload: yes
